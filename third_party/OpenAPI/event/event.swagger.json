{
  "swagger": "2.0",
  "info": {
    "title": "event/event.proto",
    "version": "1.0"
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/events": {
      "get": {
        "summary": "List events",
        "description": "List all events on the server.",
        "operationId": "EventService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/eventEvent"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of eventEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Events"
        ]
      },
      "post": {
        "summary": "Add a event",
        "description": "Add a event to the server.",
        "operationId": "EventService_AddEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventAddEventRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/api/v1/events/{userId}": {
      "get": {
        "summary": "Get a event",
        "description": "Get a event from the server.",
        "operationId": "EventService_GetEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      }
    }
  },
  "definitions": {
    "eventAddEventRequest": {
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "Content": {
          "type": "string"
        },
        "AuthorID": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "eventEvent": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "format": "int64"
        },
        "Title": {
          "type": "string"
        },
        "Content": {
          "type": "string"
        },
        "AuthorID": {
          "type": "integer",
          "format": "int32"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "gRPC-gateway boilerplate repository",
    "url": "https://github.com/RemyRanger/taktyl_core_grpc"
  }
}
